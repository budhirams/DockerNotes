
# 🐳 Docker Data Migration to a New Disk

This guide explains how to migrate Docker's default data directory (`/var/lib/docker`) to a new disk on a Linux system.

---

## 📦 Prerequisites

- A Linux server with Docker installed
- A new disk (e.g. `/dev/sdb`)
- `sudo` privileges

---

## 🔧 Steps

### 1. Partition and Format the New Disk

```bash
sudo fdisk /dev/sdb
# n (new partition), p (primary), 1, ENTER, ENTER, w (write)
sudo mkfs.ext4 /dev/sdb1
```

### 2. Create Mount Point and Mount It

```bash
sudo mkdir -p /mnt/docker-new
sudo mount /dev/sdb1 /mnt/docker-new
```

Verify:
```bash
df -h | grep docker-new
```

### 3. Stop Docker

```bash
sudo systemctl stop docker
```

### 4. Migrate Existing Docker Data

```bash
sudo rsync -aP /var/lib/docker/ /mnt/docker-new/
```

### 5. Rename Old Docker Directory

```bash
sudo mv /var/lib/docker /var/lib/docker.bak
```

### 6. Bind-Mount New Disk to Docker Path

```bash
sudo mkdir /var/lib/docker
sudo mount --bind /mnt/docker-new /var/lib/docker
```

### 7. Start Docker

```bash
sudo systemctl start docker
```

### 8. Make Mount Persistent

Edit `/etc/fstab`:

```bash
sudo blkid /dev/sdb1
```

Add to `/etc/fstab`:

```
UUID=<your-uuid-here> /mnt/docker-new ext4 defaults 0 2
/mnt/docker-new /var/lib/docker none bind 0 0
```

### 9. (Optional) Cleanup

After confirming Docker works fine:

```bash
sudo rm -rf /var/lib/docker.bak
```

---

## ✅ Notes

- Always back up important Docker volumes before making changes.
- You can use `lsblk` or `df -h` to check disk usage.
- This guide uses `rsync` for safer file copying.

---

## 💬 License

MIT

















----------------------------------------------------------------------------------------------------------------------------------------------------



# Docker Data Migration to a New Disk (Production-Ready Guide)

This guide explains how to migrate the Docker data directory (`/var/lib/docker`) to a new disk on a Linux system. It's tailored for real-world production environments where Docker may run critical containers.

---

## 🚨 Prerequisites

- Root or sudo access
- New disk mounted (e.g., `/mnt/docker-data`)
- Docker service temporarily stoppable
- Backup of critical data (recommended)

---

## 🛠️ Steps

### 1. Stop Docker

```
sudo systemctl stop docker
```

---

### 2. Create Mount Point

Assume new disk is mounted on `/mnt/docker-data`. Format and mount if not yet done:

```
sudo mkfs.ext4 /dev/sdX   # Replace sdX with your device
sudo mkdir -p /mnt/docker-data
sudo mount /dev/sdX /mnt/docker-data
```

---

### 3. Copy Existing Docker Data

```
sudo rsync -aP /var/lib/docker/ /mnt/docker-data/
```

> ⚠️ Ensure no errors occur and data integrity is preserved.

---

### 4. Update Docker Configuration

Edit or create the Docker daemon config:

```
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json > /dev/null <<EOF
{
  "data-root": "/mnt/docker-data"
}
EOF
```

---

### 5. Backup and Rename Old Directory (Optional)

```
sudo mv /var/lib/docker /var/lib/docker.bak
```

---

### 6. Restart Docker

```
sudo systemctl start docker
```

Verify Docker is working and containers come up as expected:

```
docker ps -a
```

---

## ✅ Optional: Persist Mount in /etc/fstab

To ensure the disk mounts on reboot:

```
sudo blkid /dev/sdX  # Get the UUID
```

Add the following to `/etc/fstab`:

```
UUID=xxxxx  /mnt/docker-data  ext4  defaults  0  2
```

---

## 🔄 Rollback Plan

If something goes wrong:

1. Stop Docker: `sudo systemctl stop docker`
2. Remove or fix `/etc/docker/daemon.json`
3. Restore original Docker dir: `sudo mv /var/lib/docker.bak /var/lib/docker`
4. Start Docker: `sudo systemctl start docker`

---

## 🧾 References

- [Docker Storage Docs](https://docs.docker.com/storage/storagedriver/)
- [Systemd Docker Unit File](https://docs.docker.com/engine/install/linux-postinstall/)

---

## 📌 Notes

- Always validate container behavior after migration.
- Consider running migration during maintenance windows.
